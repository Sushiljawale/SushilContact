{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ContactService {\n  constructor(httpclient) {\n    this.httpclient = httpclient;\n    this.serverurl = `http://localhost:9000`; //json server url\n  }\n  // Get-all Conatacts\n  getAllContacts() {\n    let dataURL = `${this.serverurl}/contacts`;\n    return this.httpclient.get(dataURL).pipe(catchError(this.handleError));\n  }\n  //Get single Contact\n  getContact(conatctId) {\n    let dataURL = `${this.serverurl}/contacts/${conatctId}`;\n    return this.httpclient.get(dataURL).pipe(catchError(this.handleError));\n  }\n  //Create Contact\n  createContact(contact) {\n    let dataURL = `${this.serverurl}/contacts`;\n    return this.httpclient.post(dataURL, contact).pipe(catchError(this.handleError));\n  }\n  // Update Contact\n  updateContact(contactId, conatct) {\n    let dataURL = `${this.serverurl}/contacts/${contactId}`;\n    return this.httpclient.put(dataURL, conatct).pipe(catchError(this.handleError));\n  }\n  //Delete Contact\n  deleteContact(contactId) {\n    let dataURL = `${this.serverurl}/contacts/${contactId}`;\n    return this.httpclient.delete(dataURL).pipe(catchError(this.handleError));\n  }\n  // For serch data \n  searchContacts(query) {\n    let dataURL = `${this.serverurl}/search?q=${query}`;\n    return this.httpclient.get(this.serverurl).pipe(catchError(this.handleError));\n  }\n  // Get-all Groups\n  getAllGroups() {\n    let dataURL = `${this.serverurl}/groups`;\n    return this.httpclient.get(dataURL).pipe(catchError(this.handleError));\n  }\n  //Get single Groups\n  getGroups(contact) {\n    let dataURL = `${this.serverurl}/groups/${contact.groupId}`;\n    return this.httpclient.get(dataURL).pipe(catchError(this.handleError));\n  }\n  // error handaling\n  handleError(error) {\n    let errrorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      //client Side\n      errrorMessage = 'Error : ${error.error.errrorMessage}';\n    } else {\n      //server side\n      errrorMessage = 'Status : ${error.Status} \\n Message : ${error.Message}';\n    }\n    return throwError(errrorMessage);\n  }\n}\nContactService.ɵfac = function ContactService_Factory(t) {\n  return new (t || ContactService)(i0.ɵɵinject(i1.HttpClient));\n};\nContactService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ContactService,\n  factory: ContactService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["catchError","throwError","ContactService","constructor","httpclient","getAllContacts","dataURL","serverurl","get","pipe","handleError","getContact","conatctId","createContact","contact","post","updateContact","contactId","conatct","put","deleteContact","delete","searchContacts","query","getAllGroups","getGroups","groupId","error","errrorMessage","ErrorEvent","factory","providedIn"],"sourceRoot":"","sources":["E:\\New Project\\contact-manager\\src\\app\\services\\contact.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, catchError, throwError } from 'rxjs';\r\nimport { Icontact } from '../model/icontact';\r\nimport { Igroup } from '../model/igroup';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ContactService {\r\n\r\n  private serverurl: string = `http://localhost:9000`; //json server url\r\n\r\n  constructor(private httpclient: HttpClient) { }\r\n\r\n\r\n  // Get-all Conatacts\r\n  public getAllContacts(): Observable<Icontact[]> {\r\n    let dataURL: string = `${this.serverurl}/contacts`;\r\n    return this.httpclient.get<Icontact[]>(dataURL).pipe(catchError(this.handleError));\r\n  }\r\n\r\n \r\n  //Get single Contact\r\n  public getContact(conatctId: string): Observable<Icontact> {\r\n    let dataURL: string = `${this.serverurl}/contacts/${conatctId}`;\r\n    return this.httpclient.get<Icontact>(dataURL).pipe(catchError(this.handleError));\r\n  }\r\n \r\n  //Create Contact\r\n  public createContact(contact: Icontact): Observable<Icontact> {\r\n    let dataURL: string = `${this.serverurl}/contacts`;\r\n    return this.httpclient.post<Icontact>(dataURL, contact).pipe(catchError(this.handleError));\r\n\r\n  }\r\n\r\n\r\n  // Update Contact\r\n  public updateContact(contactId: string, conatct: Icontact): Observable<Icontact> {\r\n    let dataURL: string = `${this.serverurl}/contacts/${contactId}`;\r\n\r\n    return this.httpclient.put<Icontact>(dataURL, conatct).pipe(catchError(this.handleError));\r\n  }\r\n\r\n\r\n  \r\n  //Delete Contact\r\n  public deleteContact(contactId: string): Observable<{}> {\r\n    let dataURL: string = `${this.serverurl}/contacts/${contactId}`;\r\n    return this.httpclient.delete<{}>(dataURL).pipe(catchError(this.handleError));\r\n  }\r\n\r\n// For serch data \r\n  searchContacts(query: string): Observable<Icontact[]> {\r\n    let dataURL:string=`${this.serverurl}/search?q=${query}`;\r\n   return this.httpclient.get<Icontact[]>(this.serverurl).pipe(catchError(this.handleError));\r\n    \r\n  }\r\n\r\n  \r\n\r\n\r\n  // Get-all Groups\r\n  public getAllGroups(): Observable<Igroup[]> {\r\n    let dataURL: string = `${this.serverurl}/groups`;\r\n    return this.httpclient.get<Igroup[]>(dataURL).pipe(catchError(this.handleError));\r\n  }\r\n\r\n\r\n  //Get single Groups\r\n  public getGroups(contact: Icontact): Observable<Igroup> {\r\n    let dataURL: string = `${this.serverurl}/groups/${contact.groupId}`;\r\n    return this.httpclient.get<Igroup>(dataURL).pipe(catchError(this.handleError));\r\n  }\r\n\r\n\r\n\r\n  // error handaling\r\n  public handleError(error: HttpErrorResponse) {\r\n    let errrorMessage: string = '';\r\n    if (error.error instanceof ErrorEvent) {\r\n      //client Side\r\n      errrorMessage = 'Error : ${error.error.errrorMessage}'\r\n    } else {\r\n      //server side\r\n      errrorMessage = 'Status : ${error.Status} \\n Message : ${error.Message}'\r\n    }\r\n    return throwError(errrorMessage);\r\n\r\n  }\r\n}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}