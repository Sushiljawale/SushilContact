{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ContactService {\n  constructor(httpclient) {\n    this.httpclient = httpclient;\n    this.serverurl = 'http://localhost:9000'; //json server url\n  }\n  // Get-all Conatacts\n  getAllContacts() {\n    let dataURL = '${this.serverurl}/contacts';\n    return this.httpclient.get(dataURL).pipe(catchError(this.handleError));\n  }\n  //Get single Contact\n  getContact(conatctId) {\n    let dataURL = '${this.serverurl}/contacts/${contactId}';\n    return this.httpclient.get(dataURL).pipe(catchError(this.handleError));\n  }\n  //Create Contact\n  createContact(contact) {\n    let dataURL = '${this.serverurl}/contacts';\n    return this.httpclient.post(dataURL, contact).pipe(catchError(this.handleError));\n  }\n  // Update Contact\n  updateContact(contactId, conatct) {\n    let dataURL = '${this.serverurl}/conatcts/${contactId}';\n    return this.httpclient.put(dataURL, conatct).pipe(catchError(this.handleError));\n  }\n  //Delete Contact\n  deleteContact(contactId) {\n    let dataURL = '${this.serverurl}/conatcts/${contactId}';\n    return this.httpclient.delete(dataURL).pipe(catchError(this.handleError));\n  }\n  // Get-all Groups\n  getAllGroups() {\n    let dataURL = '${this.serverurl}/groups';\n    return this.httpclient.get(dataURL).pipe(catchError(this.handleError));\n  }\n  //Get single Groups\n  getGroups(contact) {\n    let dataURL = '${this.serverurl}/groups/${contact.groupId}';\n    return this.httpclient.get(dataURL).pipe(catchError(this.handleError));\n  }\n  // error handaling\n  handleError(error) {\n    let errrorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      //client Side\n      errrorMessage = 'Error : ${error.error.errrorMessage}';\n    } else {\n      //server side\n      errrorMessage = 'Status : ${error.Status} \\n Message : ${error.Message} ';\n    }\n    return throwError(errrorMessage);\n  }\n}\nContactService.ɵfac = function ContactService_Factory(t) {\n  return new (t || ContactService)(i0.ɵɵinject(i1.HttpClient));\n};\nContactService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ContactService,\n  factory: ContactService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,EAAEC,UAAU,QAAQ,MAAM;;;AAOzD,OAAM,MAAOC,cAAc;EAIzBC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IAFtB,cAAS,GAAW,uBAAuB,CAAC,CAAC;EAEP;EAG9C;EACOC,cAAc;IACnB,IAAIC,OAAO,GAAW,4BAA4B;IAClD,OAAO,IAAI,CAACF,UAAU,CAACG,GAAG,CAAaD,OAAO,CAAC,CAACE,IAAI,CAACR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EACpF;EAEA;EACOC,UAAU,CAACC,SAAiB;IACjC,IAAIL,OAAO,GAAW,yCAAyC;IAC/D,OAAO,IAAI,CAACF,UAAU,CAACG,GAAG,CAAWD,OAAO,CAAC,CAACE,IAAI,CAACR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EAClF;EAEA;EACOG,aAAa,CAACC,OAAiB;IACpC,IAAIP,OAAO,GAAW,4BAA4B;IAClD,OAAO,IAAI,CAACF,UAAU,CAACU,IAAI,CAAWR,OAAO,EAAEO,OAAO,CAAC,CAACL,IAAI,CAACR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EAE5F;EAEA;EACOM,aAAa,CAACC,SAAiB,EAAEC,OAAiB;IACvD,IAAIX,OAAO,GAAW,yCAAyC;IAC/D,OAAO,IAAI,CAACF,UAAU,CAACc,GAAG,CAAWZ,OAAO,EAAEW,OAAO,CAAC,CAACT,IAAI,CAACR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EAC3F;EAEA;EACOU,aAAa,CAACH,SAAiB;IACpC,IAAIV,OAAO,GAAW,yCAAyC;IAC/D,OAAO,IAAI,CAACF,UAAU,CAACgB,MAAM,CAAKd,OAAO,CAAC,CAACE,IAAI,CAACR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EAC/E;EAKA;EACOY,YAAY;IACjB,IAAIf,OAAO,GAAW,0BAA0B;IAChD,OAAO,IAAI,CAACF,UAAU,CAACG,GAAG,CAAWD,OAAO,CAAC,CAACE,IAAI,CAACR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EAClF;EAGA;EACOa,SAAS,CAACT,OAAiB;IAChC,IAAIP,OAAO,GAAW,6CAA6C;IACnE,OAAO,IAAI,CAACF,UAAU,CAACG,GAAG,CAASD,OAAO,CAAC,CAACE,IAAI,CAACR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EAChF;EAIA;EACOA,WAAW,CAACc,KAAwB;IACzC,IAAIC,aAAa,GAAW,EAAE;IAC9B,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrC;MACAD,aAAa,GAAG,sCAAsC;KACvD,MAAM;MACL;MACAA,aAAa,GAAG,yDAAyD;;IAE3E,OAAOvB,UAAU,CAACuB,aAAa,CAAC;EAElC;;AApEWtB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAwB,SAAdxB,cAAc;EAAAyB,YAFb;AAAM","names":["catchError","throwError","ContactService","constructor","httpclient","getAllContacts","dataURL","get","pipe","handleError","getContact","conatctId","createContact","contact","post","updateContact","contactId","conatct","put","deleteContact","delete","getAllGroups","getGroups","error","errrorMessage","ErrorEvent","factory","providedIn"],"sourceRoot":"","sources":["E:\\New Project\\contact-manager\\src\\app\\services\\contact.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, catchError, throwError } from 'rxjs';\nimport { Icontact } from '../model/icontact';\nimport { Igroup } from '../model/igroup';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContactService {\n\n  private serverurl: string = 'http://localhost:9000'; //json server url\n\n  constructor(private httpclient: HttpClient) { }\n\n\n  // Get-all Conatacts\n  public getAllContacts(): Observable<Icontact[]> {\n    let dataURL: string = '${this.serverurl}/contacts';\n    return this.httpclient.get<Icontact[]>(dataURL).pipe(catchError(this.handleError));\n  }\n\n  //Get single Contact\n  public getContact(conatctId: string): Observable<Icontact> {\n    let dataURL: string = '${this.serverurl}/contacts/${contactId}';\n    return this.httpclient.get<Icontact>(dataURL).pipe(catchError(this.handleError));\n  }\n\n  //Create Contact\n  public createContact(contact: Icontact): Observable<Icontact> {\n    let dataURL: string = '${this.serverurl}/contacts';\n    return this.httpclient.post<Icontact>(dataURL, contact).pipe(catchError(this.handleError));\n\n  }\n\n  // Update Contact\n  public updateContact(contactId: string, conatct: Icontact): Observable<Icontact> {\n    let dataURL: string = '${this.serverurl}/conatcts/${contactId}';\n    return this.httpclient.put<Icontact>(dataURL, conatct).pipe(catchError(this.handleError));\n  }\n\n  //Delete Contact\n  public deleteContact(contactId: string): Observable<{}> {\n    let dataURL: string = '${this.serverurl}/conatcts/${contactId}';\n    return this.httpclient.delete<{}>(dataURL).pipe(catchError(this.handleError));\n  }\n\n\n\n\n  // Get-all Groups\n  public getAllGroups(): Observable<Igroup[]> {\n    let dataURL: string = '${this.serverurl}/groups';\n    return this.httpclient.get<Igroup[]>(dataURL).pipe(catchError(this.handleError));\n  }\n\n\n  //Get single Groups\n  public getGroups(contact: Icontact): Observable<Igroup> {\n    let dataURL: string = '${this.serverurl}/groups/${contact.groupId}';\n    return this.httpclient.get<Igroup>(dataURL).pipe(catchError(this.handleError));\n  }\n\n\n\n  // error handaling\n  public handleError(error: HttpErrorResponse) {\n    let errrorMessage: string = '';\n    if (error.error instanceof ErrorEvent) {\n      //client Side\n      errrorMessage = 'Error : ${error.error.errrorMessage}'\n    } else {\n      //server side\n      errrorMessage = 'Status : ${error.Status} \\n Message : ${error.Message} '\n    }\n    return throwError(errrorMessage);\n\n  }\n}\n\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}